Here is a step-by-step guide to setting up Azure Front Door with a real-world use case (multi-region app routing) using Azure CLI in Cloud Shell.

‚úÖ What is Azure Front Door?
Azure Front Door is a global, layer 7 (HTTP/HTTPS) load balancer that provides:

Global routing + failover

SSL termination

Web Application Firewall (WAF)

Caching & acceleration (CDN-like)

Custom domain + HTTPS

üß∞ Use Case:
Route users globally to the nearest web app instance (e.g., East US, West Europe) using Front Door.

üõ†Ô∏è Step-by-Step Setup: Azure Front Door + 2 Web Apps
‚úÖ Step 1: Define Variables
bash
Copy
Edit
RG="frontdoor-demo-rg"
LOCATION1="eastus"
LOCATION2="westeurope"
APP1="fdwebapp$RANDOM"
APP2="fdwebapp$RANDOM"
PLAN1="plan1"
PLAN2="plan2"
FRONTDOOR_NAME="fd-demo-frontdoor"
‚úÖ Step 2: Create Resource Group
bash
Copy
Edit
az group create --name $RG --location $LOCATION1
‚úÖ Step 3: Create Web Apps in 2 Regions
Web App 1 (East US)
bash
Copy
Edit
az appservice plan create --name $PLAN1 --resource-group $RG --location $LOCATION1 --sku B1 --is-linux
az webapp create --name $APP1 --plan $PLAN1 --resource-group $RG --runtime "NODE|18-lts"
Web App 2 (West Europe)
bash
Copy
Edit
az appservice plan create --name $PLAN2 --resource-group $RG --location $LOCATION2 --sku B1 --is-linux
az webapp create --name $APP2 --plan $PLAN2 --resource-group $RG --runtime "NODE|18-lts"
‚úÖ Step 4: Deploy Sample HTML App to Both
bash
Copy
Edit
for APP in $APP1 $APP2; do
  echo "<h1>Welcome to $APP</h1>" > index.html
  az webapp deploy --resource-group $RG --name $APP --src-path index.html --type static
done
‚úÖ Step 5: Get Web App Hostnames
bash
Copy
Edit
URL1=$(az webapp show --name $APP1 --resource-group $RG --query defaultHostName -o tsv)
URL2=$(az webapp show --name $APP2 --resource-group $RG --query defaultHostName -o tsv)
‚úÖ Step 6: Create Azure Front Door (Standard/Premium SKU)
Standard SKU includes dynamic site acceleration and routing rules.

bash
Copy
Edit
az network front-door profile create \
  --name $FRONTDOOR_NAME \
  --resource-group $RG \
  --sku Standard_AzureFrontDoor
‚úÖ Step 7: Create Endpoints (Origins)
bash
Copy
Edit
az network front-door origin-group create \
  --resource-group $RG \
  --profile-name $FRONTDOOR_NAME \
  --name myOriginGroup \
  --probe-request-path "/" \
  --probe-protocol Http \
  --probe-interval 30

az network front-door origin create \
  --resource-group $RG \
  --profile-name $FRONTDOOR_NAME \
  --origin-group-name myOriginGroup \
  --name origin1 \
  --host-name $URL1

az network front-door origin create \
  --resource-group $RG \
  --profile-name $FRONTDOOR_NAME \
  --origin-group-name myOriginGroup \
  --name origin2 \
  --host-name $URL2
‚úÖ Step 8: Create a Route and Attach to Frontend
bash
Copy
Edit
az network front-door endpoint create \
  --resource-group $RG \
  --profile-name $FRONTDOOR_NAME \
  --name myEndpoint

az network front-door route create \
  --resource-group $RG \
  --profile-name $FRONTDOOR_NAME \
  --endpoint-name myEndpoint \
  --name myRoute \
  --origin-group myOriginGroup \
  --route-type Forward \
  --https-redirect Enabled \
  --patterns "/" \
  --supported-protocols Http Https
‚úÖ Step 9: Get Front Door URL and Test
bash
Copy
Edit
az network front-door endpoint show \
  --resource-group $RG \
  --profile-name $FRONTDOOR_NAME \
  --name myEndpoint \
  --query hostName -o tsv
‚û°Ô∏è Open: https://<frontdoor-hostname>/

You‚Äôll see either:

Welcome to <webapp1>

Welcome to <webapp2> based on routing

üßº Step 10: Cleanup (Optional)
bash
Copy
Edit
az group delete --name $RG --yes --no-wait
üìå Summary
Component	Description
2 Web Apps	Backend web applications in 2 regions
Front Door	Global HTTP(S) load balancer
Origin Group	Web apps as backend targets
Routing Rule	Frontend route to backend path /
Frontend Endpoint	Public URL generated by Front Door

üß† Use Cases for Azure Front Door
Use Case	Example
Global web app load balancing	Users go to nearest region
Failover between regional backends	If East US fails, route to West Europe
HTTPS + SSL termination	Manage certs at edge
WAF integration	Protect against common attacks
CDN-like performance boost	Caching and compression at edge
Custom domain + SSL	Use your domain with HTTPS

Would you like to:

Add WAF protection

Use a custom domain with SSL




You said:
front door vs traffic manager use case diff


ChatGPT said:
Great question! Let's break down the difference between Azure Front Door and Azure Traffic Manager, focusing on their use cases, features, and when to use which.

‚úÖ High-Level Comparison
Feature / Aspect	Azure Front Door	Azure Traffic Manager
Type	Application-layer (Layer 7) global load balancer	DNS-based (Layer 4) global traffic routing
Routing Method	Path-based, latency, geo-filtering, failover, rules	Priority, weighted, performance, geographic
Protocol Support	HTTP, HTTPS only	Any protocol (HTTP, HTTPS, TCP, UDP, etc.)
SSL Termination	‚úÖ Yes	‚ùå No
Caching (CDN)	‚úÖ Yes (in Standard/Premium SKU)	‚ùå No
Custom Domain + HTTPS	‚úÖ Built-in	‚ùå Needs App Gateway/Front Door or cert manually
Real-Time Failover	‚úÖ Near instant (probe-based routing)	‚ùå Delayed (TTL-based DNS changes)
WAF Integration	‚úÖ Yes (with Standard/Premium SKU)	‚ùå No
Static IP	‚úÖ Yes (Premium SKU)	‚ùå No
Path-Based Routing	‚úÖ Yes	‚ùå No (domain-level only)

‚úÖ Use Case Differences
Use Case	Use Azure Front Door	Use Azure Traffic Manager
üîÅ Route users to closest region by latency	‚úÖ Yes (Application layer routing)	‚úÖ Yes (via DNS-based latency routing)
üí• Failover between multiple backends	‚úÖ Fast (seconds)	‚ùå Slower (based on DNS TTL)
üîê HTTPS termination + SSL management	‚úÖ Yes (built-in)	‚ùå No
üåê Routing for global web apps (HTTP/HTTPS)	‚úÖ Best suited	‚úÖ Can work, but needs HTTPS handled elsewhere
üì¶ Web Application Firewall (WAF)	‚úÖ Yes (integrated)	‚ùå Not supported
üîÅ Weighted routing (A/B testing)	‚úÖ Supported via rules	‚úÖ Yes
üí° Multi-region App Services, APIs, AKS	‚úÖ Best suited	‚úÖ Works as backup or DNS fallback
üì° Non-HTTP/S traffic (e.g., FTP, SMTP, TCP)	‚ùå Not supported	‚úÖ Yes
üß≠ Custom domain routing with HTTPS	‚úÖ Built-in with certificate	‚ùå Needs external configuration
üíª VMs, App Services, AKS, Traffic to Any IP	‚úÖ (for HTTP/S)	‚úÖ For any protocol
üîÑ Instant traffic shift (low TTL)	‚úÖ Yes	‚ùå Slower

üß† Example Scenarios
‚úÖ Use Azure Front Door When:
You have multiple web apps in different regions and want HTTP/HTTPS routing with failover + caching.

You want to terminate SSL at the edge and manage certs easily.

You need WAF, CDN caching, and path-based routing.

Example:
Global e-commerce site with high availability, DDoS protection, caching.

‚úÖ Use Azure Traffic Manager When:
You need to route non-HTTP/S traffic (e.g., TCP, UDP, SMTP).

You want DNS-based routing for services already exposing public IPs.

You want a simple failover or region-based routing without full load balancing.

Example:
Distribute SMTP servers or gaming backends or IoT endpoints globally.

‚úÖ Use Both Together?
Yes! You can combine them:

Example Architecture:
Use Traffic Manager for DNS-level failover between multiple Front Door endpoints in different global regions.

Each region uses Front Door for fast, secure app delivery and WAF protection.
